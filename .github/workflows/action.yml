name: Build and Release Nekoray

on:
  push:
    branches: [main]

jobs:
  check_tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check latest tag
        id: check_tag
        if: github.event_name != 'push'
        run: |
          tag1=$(curl -s https://api.github.com/repos/MatsuriDayo/nekoray/tags | jq -r '.[0].name')
          tag2=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/tags | jq -r '.[0].name')
          echo "Latest tag on MatsuriDayo/nekoray: $tag1"
          echo "Latest tag on this repository: $tag2"
          if [[ "$tag1" == "$tag2" ]]; then
            echo "Latest tags match! Aborting workflow."
            exit 1
          fi

  build:
    runs-on: macos-15
    needs: check_tag
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          brew install qt@5 cmake ninja protobuf
          brew link qt@5 --force
      - name: Build Nekoray
        run: |
          cd nekoray
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DNKR_PACKAGE_MACOS=ON ..
          ninja
          if [ ! -d "nekobox.app" ]; then
            echo "Error: App bundle 'nekobox.app' not found!"
            exit 1
          fi
          macdeployqt nekobox.app
          zip -r nekoray.zip nekobox.app
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nekoray
          path: nekoray/build/nekoray.zip

  test:
    runs-on: macos-15
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nekoray
          path: ./
      - name: Unzip Artifact
        run: |
          unzip -q nekoray.zip
      - name: Run Nekoray
        run: |
          ./nekobox.app/Contents/MacOS/nekobox > nekoray.log 2>&1 &
          nekoray_pid=$!
          sleep 10
          if ! ps -p "$nekoray_pid" > /dev/null; then
            echo "Nekoray failed to stay open for 10 seconds."
            cat nekoray.log
            exit 1
          fi

  create_release:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
      actions: read
      pull-requests: write
      issues: write
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nekoray
          path: ./
      - name: Check latest tag
        id: check_tag
        run: |
          latest_tag=$(git ls-remote --tags --sort=-v:refname https://github.com/MatsuriDayo/nekoray.git | head -n1 | awk '{print $2}' | sed 's/refs\/tags\///')
          echo "Latest tag is ${latest_tag}"
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
      - name: Check if release already exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.latest_tag }})
          if [[ -n $releases && $releases != *"Not Found"* ]]; then
            echo "Release ${{env.latest_tag}} already exists, deleting..."
            release_id=$(echo $releases | jq -r .id)
            curl -X DELETE -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/$release_id
            curl -X DELETE -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ env.latest_tag }}" || true
            sleep 10
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.latest_tag }}
          release_name: ${{ env.latest_tag }} macOS
          body: Built on the original repository. ${{ env.latest_tag }}
          draft: false
          prerelease: ${{ contains(env.latest_tag, 'pre') }}
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: nekoray.zip
          asset_name: nekoray.zip
          asset_content_type: application/zip
